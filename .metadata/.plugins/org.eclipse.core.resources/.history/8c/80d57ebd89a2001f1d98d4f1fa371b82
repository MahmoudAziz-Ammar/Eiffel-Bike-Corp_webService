package Repositories;

import java.util.HashMap;
import java.util.Map;

import Class.Bike;
import Class.GustaveUser;

public class BikeRepo {
	private static Map<Long, Bike> bikes = new HashMap<>();

    static {
        Bike bike1 = new Bike(1L, "Model A", 200.0, "New", true, null, 0, "First bike");
        Bike bike2 = new Bike(2L, "Model B", 150.0, "Used", true, null, 0, "Second bike");
        bikes.put(1L, bike1);
        bikes.put(2L, bike2);
        
    }

    public static void ajouter(Bike bike) {
        if (!bikes.containsKey(bike.getId())) {
            bikes.put(bike.getId(), bike);
        } else {
            System.out.println("Un vélo avec cet ID existe déjà.");
        }
    }

    
    
    
    public static Map<Long, Bike> afficherTous() {
        return bikes;
    }

    public static Bike afficherParId(Long id) {
                return bikes.get(id);
    }
    
    

    public static boolean louer(Long bikeId) {
        Bike bike = bikes.get(bikeId);
        if (bike != null && bike.isAvailable()) {
            bike.setAvailable(false);
            bike.setRentalCounter(bike.getRentalCounter() + 1);
            return true;
        }
        return false;
    }

    
    public static void retourner(Long bikeId, String notes) {
        Bike bike = bikes.get(bikeId);
        if (bike != null && bike.isAvailable()==false ) {
            bike.setAvailable(true);
            if (notes != null) {
                bike.setNotes(notes);
            }
        }
    }

    public static boolean ajouterALaListeDAttente(Long bikeId, GustaveUser user) {
        Bike bike = bikes.get(bikeId);
        if (bike != null && !bike.getWaitingList().contains(user) && bike.isAvailable()==false) {
            bike.getWaitingList().add(user);
            return true;
        }
        return false;
    }


    public static boolean retirerDeLaListeDAttente(Long bikeId, Long userId) {
        Bike bike = bikes.get(bikeId);
        if (bike != null) {
            return bike.getWaitingList().removeIf(user -> user.getId().equals(userId));
        }
        return false;
    }

}
